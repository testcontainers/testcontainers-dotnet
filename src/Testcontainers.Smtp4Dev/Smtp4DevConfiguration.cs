namespace TestContainers.Smtp4Dev;

/// <inheritdoc cref="ContainerConfiguration" />
[PublicAPI]
public class Smtp4DevConfiguration : ContainerConfiguration
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Smtp4DevConfiguration" /> class.
    /// </summary>
    /// <param name="lockSettings">Locks settings form being changed by user via web interface.</param>
    /// <param name="basePath">
    /// Specifies the virtual path from web server root where SMTP4DEV web interface will be hosted. e.g. "/" or
    /// "/smtp4dev".
    /// </param>
    /// <param name="database">
    /// Specifies the path where the database will be stored relative to APPDATA env var on Windows or XDG_CONFIG_HOME
    /// on non-Windows. Specify "" to use an in memory database.
    /// </param>
    /// <param name="numberOfMessagesToKeep">Specifies the number of messages to keep per mailbox.</param>
    /// <param name="numberOfSessionsToKeep">Specifies the number of sessions to keep.</param>
    /// <param name="disableMessageSanitisations">
    /// Disables message HTML sanitisation. Dangerous if your messages are not generated by you and not reflective of
    /// how messages might render in most email clients.
    /// </param>
    public Smtp4DevConfiguration(
        bool? lockSettings = null,
        string basePath = null,
        string database = null,
        int? numberOfMessagesToKeep = null,
        int? numberOfSessionsToKeep = null,
        bool? disableMessageSanitisations = null)
    {
        LockSettings = lockSettings;
        BasePath = basePath;
        Database = database;
        NumberOfMessagesToKeep = numberOfMessagesToKeep;
        NumberOfSessionsToKeep = numberOfSessionsToKeep;
        DisableMessageSanitisations = disableMessageSanitisations;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Smtp4DevConfiguration" /> class.
    /// </summary>
    /// <param name="resourceConfiguration">The Docker resource configuration.</param>
    public Smtp4DevConfiguration(IResourceConfiguration<CreateContainerParameters> resourceConfiguration)
        : base(resourceConfiguration)
    {
        // Passes the configuration upwards to the base implementations to create an updated immutable copy.
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Smtp4DevConfiguration" /> class.
    /// </summary>
    /// <param name="resourceConfiguration">The Docker resource configuration.</param>
    public Smtp4DevConfiguration(IContainerConfiguration resourceConfiguration)
        : base(resourceConfiguration)
    {
        // Passes the configuration upwards to the base implementations to create an updated immutable copy.
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Smtp4DevConfiguration" /> class.
    /// </summary>
    /// <param name="resourceConfiguration">The Docker resource configuration.</param>
    public Smtp4DevConfiguration(Smtp4DevConfiguration resourceConfiguration)
        : this(new Smtp4DevConfiguration(), resourceConfiguration)
    {
        // Passes the configuration upwards to the base implementations to create an updated immutable copy.
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Smtp4DevConfiguration" /> class.
    /// </summary>
    /// <param name="oldValue">The old Docker resource configuration.</param>
    /// <param name="newValue">The new Docker resource configuration.</param>
    public Smtp4DevConfiguration(Smtp4DevConfiguration oldValue, Smtp4DevConfiguration newValue)
        : base(oldValue, newValue)
    {
        LockSettings = BuildConfiguration.Combine(oldValue.LockSettings, newValue.LockSettings);
        BasePath = BuildConfiguration.Combine(oldValue.BasePath, newValue.BasePath);
        Database = BuildConfiguration.Combine(oldValue.Database, newValue.Database);
        NumberOfMessagesToKeep = BuildConfiguration.Combine(oldValue.NumberOfMessagesToKeep, newValue.NumberOfMessagesToKeep);
        NumberOfSessionsToKeep = BuildConfiguration.Combine(oldValue.NumberOfSessionsToKeep, newValue.NumberOfSessionsToKeep);
        DisableMessageSanitisations = BuildConfiguration.Combine(oldValue.DisableMessageSanitisations, newValue.DisableMessageSanitisations);
    }

    /// <summary>
    /// Gets whether settings can be changed by user via web interface.
    /// </summary>
    public bool? LockSettings { get; }

    /// <summary>
    /// Gets the virtual path from web server root where SMTP4DEV web interface will be hosted. e.g. "/" or
    /// "/smtp4dev".
    /// </summary>
    public string BasePath { get; }

    /// <summary>
    /// Gets the path where the database will be stored relative to APPDATA env var on Windows or XDG_CONFIG_HOME
    /// on non-Windows. Specify "" to use an in memory database.
    /// </summary>
    public string Database { get; }

    /// <summary>
    /// Gets the number of messages to keep per mailbox.
    /// </summary>
    public int? NumberOfMessagesToKeep { get; }

    /// <summary>
    /// Gets the number of sessions to keep.
    /// </summary>
    public int? NumberOfSessionsToKeep { get; }

    /// <summary>
    /// Gets whether message HTML sanitisation is disabled.
    /// </summary>
    public bool? DisableMessageSanitisations { get; }
}