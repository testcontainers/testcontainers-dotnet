using TestContainers.Smtp4Dev;

namespace Testcontainers.Smtp4Dev;

/// <inheritdoc cref="ContainerBuilder{TBuilderEntity, TContainerEntity, TConfigurationEntity}" />
[PublicAPI]
public sealed class Smtp4DevBuilder : ContainerBuilder<Smtp4DevBuilder, Smtp4DevContainer, Smtp4DevConfiguration>
{
    public const string Smtp4DevImage = "rnwood/smtp4dev:latest";

    public const ushort WebInterfacePort = 80;
    public const ushort SmtpPort = 25;
    public const ushort ImapPort = 143;

    public const bool DefaultLockSettings = false;
    public const string DefaultBasePath = "/";
    public const string DefaultDatabase = "database.db";
    public const ushort DefaultNumberOfMessagesToKeep = 100;
    public const ushort DefaultNumberOfSessionsToKeep = 100;
    public const bool DefaultDisableMessageSanitisation = false;

    /// <summary>
    /// Initializes a new instance of the <see cref="Smtp4DevBuilder" /> class.
    /// </summary>
    public Smtp4DevBuilder()
        : this(new Smtp4DevConfiguration())
    {
        DockerResourceConfiguration = Init().DockerResourceConfiguration;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Smtp4DevBuilder" /> class.
    /// </summary>
    /// <param name="resourceConfiguration">The Docker resource configuration.</param>
    private Smtp4DevBuilder(Smtp4DevConfiguration resourceConfiguration)
        : base(resourceConfiguration)
    {
        DockerResourceConfiguration = resourceConfiguration;
    }

    /// <inheritdoc />
    protected override Smtp4DevConfiguration DockerResourceConfiguration { get; }

    /// <summary>
    /// Sets whether settings can be changed by user via web interface.
    /// </summary>
    /// <param name="lockSettings">Locks settings form being changed by user via web interface.</param>
    /// <returns>A configured instance of <see cref="Smtp4DevBuilder" />.</returns>
    public Smtp4DevBuilder WithLockSettings(bool lockSettings)
    {
        return Merge(DockerResourceConfiguration, new Smtp4DevConfiguration(lockSettings: lockSettings))
            .WithEnvironment("LockSettings", lockSettings.ToString());
    }

    /// <summary>
    /// Sets the virtual path from web server root where SMTP4DEV web interface will be hosted. e.g. "/" or
    /// "/smtp4dev".
    /// </summary>
    /// <param name="basePath">Locks settings form being changed by user via web interface.</param>
    /// <returns>A configured instance of <see cref="Smtp4DevBuilder" />.</returns>
    public Smtp4DevBuilder WithBasePath(string basePath)
    {
        return Merge(DockerResourceConfiguration, new Smtp4DevConfiguration(basePath: basePath))
            .WithEnvironment("BasePath", basePath);
    }

    /// <summary>
    /// Sets the path where the database will be stored relative to APPDATA env var on Windows or XDG_CONFIG_HOME
    /// on non-Windows. Specify "" to use an in memory database.
    /// </summary>
    /// <param name="database">
    /// The path where the database will be stored relative to APPDATA env var on Windows or XDG_CONFIG_HOME
    /// on non-Windows. Specify "" to use an in memory database.
    /// </param>
    /// <returns>A configured instance of <see cref="Smtp4DevBuilder" />.</returns>
    public Smtp4DevBuilder WithDatabase(string database)
    {
        return Merge(DockerResourceConfiguration, new Smtp4DevConfiguration(database: database))
            .WithEnvironment("Latabase", database);
    }

    /// <summary>
    /// Sets the number of messages to keep per mailbox.
    /// </summary>
    /// <param name="numberOfMessagesToKeep">The number of messages to keep per mailbox.</param>
    /// <returns>A configured instance of <see cref="Smtp4DevBuilder" />.</returns>
    public Smtp4DevBuilder WithNumberOfMessagesToKeep(int numberOfMessagesToKeep)
    {
        return Merge(DockerResourceConfiguration,
            new Smtp4DevConfiguration(numberOfMessagesToKeep: numberOfMessagesToKeep))
            .WithEnvironment("NumberOfMessagesToKeep", numberOfMessagesToKeep.ToString());
    }

    /// <summary>
    /// Sets the number of sessions to keep.
    /// </summary>
    /// <param name="numberOfSessionsToKeep">The number of sessions to keep.</param>
    /// <returns>A configured instance of <see cref="Smtp4DevBuilder" />.</returns>
    public Smtp4DevBuilder WithNumberOfSessionsToKeep(int numberOfSessionsToKeep)
    {
        return Merge(DockerResourceConfiguration,
            new Smtp4DevConfiguration(numberOfSessionsToKeep: numberOfSessionsToKeep))
            .WithEnvironment("NumberOfSessionsToKeep", numberOfSessionsToKeep.ToString());
    }

    /// <summary>
    /// Sets whether message HTML sanitisation should be enabled. Dangerous if your messages are not generated by you
    /// and not reflective of how messages might render in most email clients.
    /// </summary>
    /// <param name="disableMessageSanitisations">
    /// Whether message HTML sanitisation should be enabled. Dangerous if your messages are not generated by you
    /// and not reflective of how messages might render in most email clients.
    /// </param>
    /// <returns>A configured instance of <see cref="Smtp4DevBuilder" />.</returns>
    public Smtp4DevBuilder WithDisableMessageSanitisations(bool disableMessageSanitisations)
    {
        return Merge(DockerResourceConfiguration,
            new Smtp4DevConfiguration(disableMessageSanitisations: disableMessageSanitisations))
            .WithEnvironment("DisableMessageSanitisations", disableMessageSanitisations.ToString());
    }

    /// <inheritdoc />
    public override Smtp4DevContainer Build()
    {
        Validate();
        return new Smtp4DevContainer(DockerResourceConfiguration);
    }

    /// <inheritdoc />
    protected override Smtp4DevBuilder Init()
    {
        return base.Init()
            .WithImage(Smtp4DevImage)
            .WithPortBinding(SmtpPort, true)
            .WithPortBinding(ImapPort, true)
            .WithPortBinding(WebInterfacePort, true)
            .WithWaitStrategy(Wait.ForUnixContainer()
                .UntilMessageIsLogged("Now listening on: .+")
                .UntilMessageIsLogged("SMTP Server is listening on port")
                .UntilMessageIsLogged("IMAP Server is listening on port") );
    }

    /// <inheritdoc />
    protected override Smtp4DevBuilder Clone(IResourceConfiguration<CreateContainerParameters> resourceConfiguration)
    {
        return Merge(DockerResourceConfiguration, new Smtp4DevConfiguration(resourceConfiguration));
    }

    /// <inheritdoc />
    protected override Smtp4DevBuilder Clone(IContainerConfiguration resourceConfiguration)
    {
        return Merge(DockerResourceConfiguration, new Smtp4DevConfiguration(resourceConfiguration));
    }

    /// <inheritdoc />
    protected override Smtp4DevBuilder Merge(Smtp4DevConfiguration oldValue, Smtp4DevConfiguration newValue)
    {
        return new Smtp4DevBuilder(new Smtp4DevConfiguration(oldValue, newValue));
    }
}